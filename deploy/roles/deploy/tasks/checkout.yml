# Clone the repo, checking out the specified commit. If a canonical-sha-named
# directory for that commit doesn't already exist, or if "force" is true,
# clone the repo and build it.

- name: ensure pre-existing temp directory is removed
  file: path={{clone_path}} state=absent

- name: copy current checkout into temp directory, if it exists
  copy:
    src: "{{site_path}}/"
    dest: "{{clone_path}}"
    remote_src: yes
  when: site_dir.stat.exists

# https://serverfault.com/a/442099
# https://github.com/ansible/ansible/issues/7235#issuecomment-45842303
- name: grant www-data access to SSH_AUTH_SOCK for ssh forwarding
  become: yes
  become_user: root
  acl:
    path: "{{item.path}}"
    etype: user
    entity: www-data
    permissions: "{{item.permissions}}"
    state: present
  with_items:
    - path: "{{ ansible_env.SSH_AUTH_SOCK|dirname }}"
      permissions: x
    - path: "{{ ansible_env.SSH_AUTH_SOCK }}"
      permissions: rw

- name: test git authentication
  command: ssh -T -v git@github.com
  register: exit
  failed_when: exit.rc not in [0, 1] # return code is 255 when not recognized
  environment:
    SSH_AUTH_SOCK: "{{ ansible_env.SSH_AUTH_SOCK }}"

- name: clone git repo into temp directory
  git:
    repo: "{{synced_folder if local else git_repo}}"
    dest: "{{clone_path}}"
    version: "{{commit}}"
    force: yes
  environment:
    SSH_AUTH_SOCK: "{{ ansible_env.SSH_AUTH_SOCK }}"

- name: ungrant www-data access to SSH_AUTH_SOCK for ssh forwarding
  become: yes
  become_user: root
  acl:
    path: "{{item.path}}"
    etype: user
    entity: www-data
    state: absent
  with_items:
    - path: "{{ ansible_env.SSH_AUTH_SOCK|dirname }}"
    - path: "{{ ansible_env.SSH_AUTH_SOCK }}"

- name: get sha of cloned repo
  command: git rev-parse HEAD
  args:
    chdir: "{{clone_path}}"
  register: sha
  changed_when: false

- name: check if specified commit sha has already been deployed
  stat: path={{base_path}}/{{sha.stdout}} get_checksum=no get_md5=no
  register: sha_dir

- include: build.yml
  when: force or not sha_dir.stat.exists

- name: delete pre-existing sha-named directory
  file: path={{base_path}}/{{sha.stdout}} state=absent
  when: force and sha_dir.stat.exists

- name: move cloned repo to sha-named directory
  command: mv {{clone_path}} {{base_path}}/{{sha.stdout}}
  when: force or not sha_dir.stat.exists

- name: ensure just-created temp directory is removed
  file: path={{clone_path}} state=absent
